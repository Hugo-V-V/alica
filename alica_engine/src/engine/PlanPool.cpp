#include "engine/AlicaEngine.h"
#include "engine/IPlanCreator.h"
#include "engine/PlanPool.h"
#include "engine/RunningPlan.h"
#include "engine/BasicPlan.h"
#include "engine/PlanRepository.h"
#include "engine/model/Configuration.h"
#include "engine/model/ConfAbstractPlanWrapper.h"
#include "engine/model/Plan.h"

namespace alica
{

PlanPool::PlanPool(AlicaEngine* ae)
        : _ae(ae)
{
}

PlanPool::~PlanPool() = default;

bool PlanPool::init(IPlanCreator& planCreator)
{
    const PlanRepository::Accessor<ConfAbstractPlanWrapper>& wrappers =
            _ae->getPlanRepository().getConfAbstractPlanWrappers();
    for (const ConfAbstractPlanWrapper* wrapper : wrappers) {
        if (const auto* plan = dynamic_cast<const Plan*>(wrapper->getAbstractPlan())) {
            if (getBasicPlan(plan, wrapper->getConfiguration())) {
                // A BasicPlan representing this combination of Plan and Configuration was created already!
                continue;
            }

            auto basicPlan = planCreator.createPlan(plan->getId());
            if (!basicPlan) {
                // probably something with the (autogenerated) plan creator is wrong
                return false;
            }

            _availablePlans.insert(std::make_pair(wrapper, basicPlan));
        }
    }
    return true;
}

const std::shared_ptr<BasicPlan> PlanPool::getBasicPlan(RunningPlan& rp) const
{
    if (const auto* plan = dynamic_cast<const Plan*>(rp.getActivePlan())) {
        if (auto& basicPlan = getBasicPlan(plan, rp.getConfiguration())) {
            return basicPlan;
        }
    }

    ALICA_ERROR_MSG("PlanPool::getBasicPlan(): Cannot get BasicPlan of given RunningPlan! Plan Name: " << rp.getActivePlan()->getName());
    return nullptr;
}

const std::shared_ptr<BasicPlan> PlanPool::getBasicPlan(const Plan* plan, const Configuration* configuration) const
{
    for (const auto& poolEntry : _availablePlans) {
        if (poolEntry.first->getAbstractPlan() == plan && poolEntry.first->getConfiguration() == configuration) {
            return poolEntry.second;
        }
    }
    return nullptr;
}

} //namespace alica