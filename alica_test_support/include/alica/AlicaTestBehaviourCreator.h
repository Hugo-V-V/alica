#pragma once

#include <engine/IBehaviourCreator.h>

#include <unordered_map>

namespace alica
{
class BasicBehaviour;
class AlicaTestBehaviourCreator : public IBehaviourCreator
{
public:
    /**
     * Requires a reference the autogenerated behaviour creator of
     * your application.
     * @param defaultBehaviourCreator Reference to your applications behaviour
     * creator
     */
    explicit AlicaTestBehaviourCreator(IBehaviourCreator& defaultBehaviourCreator);
    ~AlicaTestBehaviourCreator() override = default;

    /**
     * The default interface, used by the ALICA Engine to retrieve
     * an instance of a behaviour. The TestBehaviourCreator stores created
     * behaviours, so that there will only be one instance per ID.
     * @param behaviourID Id of the requested behaviour.
     * @return std::shared_ptr<BasicBehaviour> pointing to the requested behaviour.
     */
    std::shared_ptr<BasicBehaviour> createBehaviour(int64_t behaviourID) override;

    /**
     * This method allows to configure for which behaviour a mockup will be
     * returned by the createBehaviour(int64_t behaviourId) method of this class.
     *
     * For all others, the default behaviour creator passed in the constructor will
     * be asked.
     *
     * Note: This method overwrites mockups that very inserted for the
     * same behaviourId.
     * @param behaviourID The id that the real behaviour has.
     * @param behaviourMockUp The actual mockup behaviour.
     */
    void setBehaviourMockUp(int64_t behaviourID, const std::shared_ptr<BasicBehaviour>& behaviourMockUp);

private:
    std::unordered_map<int64_t, std::shared_ptr<BasicBehaviour>> _createdBehaviours;
    IBehaviourCreator& _defaultBehaviourCreator;
};
} // namespace alica
